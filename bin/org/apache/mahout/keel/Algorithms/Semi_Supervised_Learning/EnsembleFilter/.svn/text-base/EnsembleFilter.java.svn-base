/***********************************************************************

	This file is part of KEEL-software, the Data Mining tool for regression, 
	classification, clustering, pattern mining and so on.

	Copyright (C) 2004-2010
	
	F. Herrera (herrera@decsai.ugr.es)
    L. Sánchez (luciano@uniovi.es)
    J. Alcalá-Fdez (jalcala@decsai.ugr.es)
    S. García (sglopez@ujaen.es)
    A. Fernández (alberto.fernandez@ujaen.es)
    J. Luengo (julianlm@decsai.ugr.es)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses/
  
**********************************************************************/

/**
 * <p>
 * @author Written by Jose A. Saez Munoz, research group SCI2S (Soft Computing and Intelligent Information Systems).
 * DECSAI (DEpartment of Computer Science and Artificial Intelligence), University of Granada - Spain.
 * Date: 06/01/10
 * @version 1.0
 * @since JDK1.6
 * </p>
 */

package org.apache.mahout.keel.Algorithms.Semi_Supervised_Learning.EnsembleFilter;

import java.util.Vector;
import org.apache.mahout.keel.Dataset.Instance;


/**
 * <p>
 * The Ensemble Filter...
 * Reference: 1999-Brodley-JAIR
 * </p>
 */
public class EnsembleFilter {
	
	private Instance[] instancesTrain;	// all the instances of the training set
	private Vector[] partitions;		// indexes of the instances in each partition
	private boolean[][] correctlyLabeled;	// indicates if the instance is correctly labeled
	private PartitionScheme partSch;	// partition scheme used
	private Vector noisyInstances;		// indexes of the noisy instances from training set
	private int numFilters = 3;
	

//*******************************************************************************************************************************

	/**
	 * <p>
	 * It initializes the partitions from training set
	 * </p>
	 */
	public EnsembleFilter(String newDataset){
		
		Parameters.trainInputFile = newDataset;
		
		// create instances
		partSch = new PartitionScheme();			// create the partitions
		instancesTrain = partSch.getInstances();	// get all the instances of training set
		partitions = partSch.getPartitions();
		
		partSch.createPartitionFiles();
		
		correctlyLabeled = new boolean[numFilters][Parameters.numInstances];
		for(int i = 0 ; i < numFilters ; ++i)
			for(int j = 0 ; j < Parameters.numInstances ; ++j)
				correctlyLabeled[i][j] = true;
	}
	
//*******************************************************************************************************************************

	/**
	 * <p>
	 * It initializes the partitions from training set
	 * </p>
	 * @param paramName parameter name
	 * @return true if the parameter is real, false otherwise
	 */
	public int[] run(){
		
		Instance[] train, test;

		for(int partTest = 0 ; partTest < Parameters.numPartitions ; ++partTest){
			
			// to train K-NN classifier
			train = partSch.getTrainPartition(partTest);
			test = partSch.getTestPartition(partTest);
				
		    KNN knn = new KNN(train, test);

		    knn.execute();
		    int[] pre3 = knn.getPredictions();
		        
		    for(int i = 0 ; i < partitions[partTest].size() ; ++i)
		    	correctlyLabeled[0][(Integer)partitions[partTest].get(i)] = (pre3[i] == instancesTrain[(Integer)partitions[partTest].get(i)].getOutputNominalValuesInt(0));
			
			
		    // to train C45 classifier
		    C45 c45 = null;

			try {
				c45 = new C45("train"+(partTest+1)+".dat","test"+(partTest+1)+".dat");
			} catch (Exception e) {
				e.printStackTrace();
			}
				
		     int[] pre2 = c45.getPredictions();
		     for(int i = 0 ; i < partitions[partTest].size() ; ++i)
		    	 correctlyLabeled[1][(Integer)partitions[partTest].get(i)] = (pre2[i] == instancesTrain[(Integer)partitions[partTest].get(i)].getOutputNominalValuesInt(0));

		     
		     // to train LDA classifier
			 LDA lda = new LDA();
			 lda.runMethod("train"+(partTest+1)+".dat","test"+(partTest+1)+".dat", train, test);
			 
			 int[] pre1 = lda.getPredictions();
		     for(int i = 0 ; i < partitions[partTest].size() ; ++i)
		    	 correctlyLabeled[2][(Integer)partitions[partTest].get(i)] = (pre1[i] == instancesTrain[(Integer)partitions[partTest].get(i)].getOutputNominalValuesInt(0));

		}
		
		
		
		if(Parameters.filterType.equals("consensus")){
			
			boolean ruido = false;
			noisyInstances = new Vector();
			
			for(int j = 0 ; j < Parameters.numInstances ; ++j){
				ruido = true;
				for(int i = 0 ; i < numFilters && ruido ; ++i)
					if(correctlyLabeled[i][j] ==  true){
						ruido = false;
					}
				
				if(ruido)
					noisyInstances.add(j);
			}
		}

		
		if(Parameters.filterType.equals("majority")){
			
			noisyInstances = new Vector();
			
			for(int j = 0 ; j < Parameters.numInstances ; ++j){
				int cont = 0;
				for(int i = 0 ; i < numFilters ; ++i)
					if(correctlyLabeled[i][j] ==  false){
						cont++;
					}
				
				if(cont > (double)numFilters/2)
					noisyInstances.add(j);
			}
		}
		
		partSch.deletePartitionFiles();
		
		int[] noisyEx = new int[noisyInstances.size()];
		for(int t = 0 ; t < noisyEx.length ; ++t)
			noisyEx[t] = (Integer) noisyInstances.get(t);
		
		
		return noisyEx;
		
	}	
	
}
