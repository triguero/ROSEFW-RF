/***********************************************************************

	This file is part of KEEL-software, the Data Mining tool for regression, 
	classification, clustering, pattern mining and so on.

	Copyright (C) 2004-2010
	
	F. Herrera (herrera@decsai.ugr.es)
    L. Sánchez (luciano@uniovi.es)
    J. Alcalá-Fdez (jalcala@decsai.ugr.es)
    S. García (sglopez@ujaen.es)
    A. Fernández (alberto.fernandez@ujaen.es)
    J. Luengo (julianlm@decsai.ugr.es)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses/
  
**********************************************************************/
/**
 * <p>
 * @author Written by Jose A. Saez Munoz, research group SCI2S (Soft Computing and Intelligent Information Systems).
 * DECSAI (DEpartment of Computer Science and Artificial Intelligence), University of Granada - Spain.
 * Date: 06/01/10
 * @version 1.0
 * @since JDK1.6
 * </p>
 */

package org.apache.mahout.keel.Algorithms.Semi_Supervised_Learning.CVCommitteesFilter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Vector;
import org.core.Randomize;
import org.apache.mahout.keel.Algorithms.Genetic_Rule_Learning.Globals.FileManagement;
import org.apache.mahout.keel.Dataset.Attribute;
import org.apache.mahout.keel.Dataset.Attributes;
import org.apache.mahout.keel.Dataset.Instance;
import org.apache.mahout.keel.Dataset.InstanceSet;


/**
 * <p>
 * The Ensemble Filter...
 * Reference: 1999-Brodley-JAIR
 * </p>
 */
public class CVCommitteesFilter {
	
	private Instance[] instancesTrain;	// all the instances of the training set
	private boolean[][] correctlyLabeled;	// indicates if the instance is correctly labeled
	private PartitionScheme partSch;	// partition scheme used
	private Vector noisyInstances;		// indexes of the noisy instances from training set
	

//*******************************************************************************************************************************

	/**
	 * <p>
	 * It initializes the partitions from training set
	 * </p>
	 */
	public CVCommitteesFilter(String newDataset){
		
		Parameters.trainInputFile = newDataset;
		
		InstanceSet is = new InstanceSet();
		Attributes.clearAll();
		try {	
			is.readSet(Parameters.trainInputFile, true);
        }catch(Exception e){
            System.exit(1);
        }
        
        instancesTrain = is.getInstances();
        Parameters.numClasses = Attributes.getOutputAttribute(0).getNumNominalValues();
        Parameters.numAttributes = Attributes.getInputAttributes().length;
        Parameters.numInstances = instancesTrain.length;
        

		// create instances
		partSch = new PartitionScheme(Parameters.trainInputFile,Parameters.numPartitions);			// create the partitions
		instancesTrain = partSch.getInstances();	// get all the instances of training set
		partSch.createPartitionFiles();
		
		
		correctlyLabeled = new boolean[Parameters.numPartitions][Parameters.numInstances];
		for(int i = 0 ; i < Parameters.numPartitions ; ++i)
			for(int j = 0 ; j < Parameters.numInstances ; ++j)
				correctlyLabeled[i][j] = true;
	}
	
//*******************************************************************************************************************************

	/**
	 * <p>
	 * It initializes the partitions from training set
	 * </p>
	 * @param paramName parameter name
	 * @return true if the parameter is real, false otherwise
	 */
	public int[] run(){
		

		for(int k = 0 ; k < Parameters.numPartitions ; ++k){
			
			// to train C45 classifier
			C45 c45 = null;

			try {
				c45 = new C45("train"+(k+1)+".dat",Parameters.trainInputFile);
			} catch (Exception e) {
				e.printStackTrace();
			}
					
			int[] pre = c45.getPredictions();
			for(int i = 0 ; i < Parameters.numInstances ; ++i)
				correctlyLabeled[k][i] = (pre[i] == instancesTrain[i].getOutputNominalValuesInt(0));
		}
		
		
		
		if(Parameters.filterType.equals("consensus")){
			
			noisyInstances = new Vector();
			
			for(int j = 0 ; j < Parameters.numInstances ; ++j){
				
				boolean isNoisy = true;
				
				for(int pa = 0 ; pa < Parameters.numPartitions && isNoisy ; ++pa)
					if(correctlyLabeled[pa][j] ==  true)
						isNoisy = false;
				
					
				if(isNoisy)
					noisyInstances.add(j);
			}
		}

		
		if(Parameters.filterType.equals("majority")){
			
			noisyInstances = new Vector();
			
			for(int j = 0 ; j < Parameters.numInstances ; ++j){
				int cont = 0;
				for(int pa = 0 ; pa < Parameters.numPartitions ; ++pa)
					if(correctlyLabeled[pa][j] ==  false){
						cont++;
					}
				
				if(cont > (Parameters.numPartitions/2))
					noisyInstances.add(j);
			}
		}
		
		partSch.deletePartitionFiles();
		
		int[] noisyEx = new int[noisyInstances.size()];
		for(int t = 0 ; t < noisyEx.length ; ++t)
			noisyEx[t] = (Integer) noisyInstances.get(t);
		
		
		return noisyEx;
	}
	
	
	
}
